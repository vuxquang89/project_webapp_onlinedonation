/*
 *   v1.5
 *
 * @Desc       
 * @Cat 	  plugins/jQuery nail
 * @Date      2015/5
 * @Author    jmj  
 * 
 * @Example
 	$('#oNail').nail({
	    direction: 'right',
	    topOffset: 10,
	    onlyTop: false,	
	    bottomOffset: 76,
	    defaultCall: function(oNail){},
	    fixedCall: function(oNail){},
	    floorCall: function(oNail){}
	})
 * 
*/

(function ($) {
    $.fn.extend({
    	nail: function(options){    

		    var oNail = this;

    		var defaults = {
				nailBrother: oNail.siblings(),		//    optional
				nailWrap: oNail.parent(),			//  	optional
				direction: 'left',						// 	'left' | 'right'
				topOffset: 0,						// 
				onlyTop: false,						// 
				bottomOffset: 0,					// 
    			defaultCall: null,					// 
    			fixedCall: null,					// 
    			floorCall: null						// 
    		}
    	

		    var options = $.extend(defaults, options || {});	
		    	
		    var oNailTotop = oNail.offset().top,
		    	oNailHei = oNail.outerHeight(),
		    	$win = $(window),
		    	oldSTop = $win.scrollTop();

		    // 
		    if(options.nailBrother.height() > oNailHei){

		        //
		        $win.resize(function(){
		            if(oNail.attr('style')){
		                if(oNail.attr('style').indexOf('fixed') >= 0){
		                    oNail.css(options.direction, $(window).width()-options.nailWrap.width()-options.nailWrap.offset().left );
		                }else{
		                    oNail.css(options.direction, 0);
		                }
		            } 
		        }); 
		        
	            // 
	            $win.scroll(function(){
	                var newSTop = $win.scrollTop();

	                var _nail = {
	                	high: function(nNailOffset){

	                		var position = {
	                			fixed: {
	                				floor: function(){
	                					// fixed
				                        var fixedNum = ($win.width() - options.nailWrap.width()) / 2;
										var fixedStyle = 'position:fixed; top:auto;bottom: '+options.bottomOffset+'px; '+options.direction+':'+fixedNum+'px';   
				                         
				                        oNail.attr('style', fixedStyle);
	                				},
	                				ceil: function(){
				                        var fixedNum = ($win.width() - options.nailWrap.width()) / 2;
										var fixedStyle = 'position:fixed; top:auto;top: '+options.topOffset+'px; '+options.direction+':'+fixedNum+'px';   
				                         
				                        oNail.attr('style', fixedStyle);
	                				}
	                			},
	                			absolute: {
	                				floor: function(){
				                        var absoluteStyle = 'position:absolute;'+options.direction+':0;top:auto; bottom:'+options.bottomOffset+'px';
				                        oNail.attr('style', absoluteStyle);
	                				},
	                				ceil: function(){
				                        var absoluteStyle = 'position:absolute;'+options.direction+':0;top:' + (oNail.offset().top - options.nailBrother.offset().top) + 'px; bottom:auto';
				                        oNail.attr('style', absoluteStyle);
	                				}
	                			}
	                		}

	                		var nNailBrotherOffset = options.nailBrother.outerHeight() - $win.height();
                			
                			// nailBrother
                			if(newSTop >= options.nailBrother.offset().top + nNailBrotherOffset){
		                        position.absolute.floor();
                				return;
                			}

                			// nailBrother 
                			if(newSTop >= options.nailBrother.offset().top){
                				
	                			if(oldSTop > newSTop){						// 
	                				// oNail 
			                        if(newSTop >= oNail.offset().top){
			                        	position.absolute.ceil();
			                        }else{
	                					position.fixed.ceil();
			                        }			                    
	                			}else{										// 
	                				// oNail 
	                				if(newSTop >= oNail.offset().top + nNailOffset){
	                					position.fixed.floor();
				                    }else{
				                    	position.absolute.ceil();
				                    }
	                			}
                			}
                			oldSTop = newSTop;

	                	},
	                	short: function(){
	                		var position = {
	                			fixed: {
	                				ceil: function(){
				                        var fixedNum = ($win.width() - options.nailWrap.width()) / 2;
				                        var fixedStyle = 'position:fixed; bottom:auto;top: '+options.topOffset+'px; '+options.direction+':'+fixedNum+'px';		                         
				                        oNail.attr('style', fixedStyle);
	                				}
	                			},
	                			absolute: {
	                				floor: function(){
				                        var absoluteStyle = 'position:absolute;'+options.direction+':0;top:auto; bottom:'+options.bottomOffset+'px';
				                        oNail.attr('style', absoluteStyle);
	                				}
	                			}
	                		}
		                    var offsetFloor = options.nailBrother.outerHeight() +options.nailBrother.offset().top - (oNailHei+options.topOffset) - options.bottomOffset;
		                    if(offsetFloor > newSTop || options.onlyTop){
		                    	position.fixed.ceil();
		                        if(options.fixedCall && typeof options.fixedCall === 'function'){
			                    	options.fixedCall(oNail);
			                    }

		                    }else{
		                    	position.absolute.floor();
		                        if(options.floorCall && typeof options.floorCall === 'function'){
			                    	options.floorCall(oNail);
			                    }
		                    }
	                	},
	                	default: function(){
		                	// default
		                    var defaultStyle = 'position:absolute;'+options.direction+':0;';
		                    oNail.attr('style', defaultStyle);

		                    if(options.defaultCall && typeof options.defaultCall === 'function'){
		                    	options.defaultCall(oNail);
		                    }	
	                	}
	                }

	                var nNailOffset = oNailHei - $win.height();
	                // 
	                if(nNailOffset > 0){

	                	// oNail 
	                	if(newSTop >= oNailTotop){
	                	    _nail.high(nNailOffset); 
	                		return;
	                	}

                		_nail.default();

	                // 
	                }else{
	                	if(newSTop >= oNailTotop - options.topOffset){
	                		_nail.short();
	                	}else{
	                		_nail.default();
	                	}
	                }
	                
	            });

		    } 
		    // Returns the element. Chainable.
		    return oNail;
		}	

    });

})(jQuery);